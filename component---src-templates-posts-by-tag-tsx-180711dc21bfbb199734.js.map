{"version":3,"file":"component---src-templates-posts-by-tag-tsx-180711dc21bfbb199734.js","mappings":"2MAKO,MAAMA,EAERC,IAAe,IAAd,KAAEC,GAAMD,EACZ,KACGC,EAAKC,aACLD,EAAKC,YAAYC,OACjBF,EAAKC,YAAYE,MACjBH,EAAKC,YAAYG,SACjBJ,EAAKC,YAAYI,YACjBL,EAAKC,YAAYK,MAElB,MAAM,IAAIC,MAAM,gBAGlB,MAAMC,GAAQC,EAAAA,EAAAA,GAAST,EAAKC,YAAYI,WAAWK,iBACnD,IAAKF,EACH,MAAM,IAAID,MAAM,YAGlB,OACEI,EAAAA,cAACC,EAAAA,KAAI,CACHC,GAAK,GAAEb,EAAKC,YAAYE,OACxBW,UAAU,kCAEVH,EAAAA,cAACI,EAAAA,EAAW,CAACP,MAAOA,EAAOQ,IAAI,cAC/BL,EAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,cAAA,OAAKG,UAAU,iBAAiBd,EAAKC,YAAYC,OACjDS,EAAAA,cAAA,OAAKG,UAAU,6BACZd,EAAKC,YAAYG,UAGtBO,EAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,cAACM,EAAAA,EAAO,CAACX,KAAMN,EAAKC,YAAYK,SAG/B,ECtCEY,EAERnB,IAAgB,IAAf,MAAEoB,GAAOpB,EACb,OACEY,EAAAA,cAAA,MAAIG,UAAU,0EACXK,EAAMC,KAAKpB,GACVW,EAAAA,cAAA,MAAIU,IAAKrB,EAAKsB,GAAIR,UAAU,kCAC1BH,EAAAA,cAACb,EAAI,CAACE,KAAMA,OAGb,C,6GCOT,UAdmBD,IAGuC,IAHtC,KAClBwB,EAAI,YACJC,GACmDzB,EACnD,OACEY,EAAAA,cAACc,EAAAA,EAAM,KACLd,EAAAA,cAAA,MAAIG,UAAU,+CACXU,EAAYE,IAAI,UAEnBf,EAAAA,cAACO,EAAAA,EAAQ,CAACC,MAAOI,EAAKI,kBAAkBR,QACjC,EAMN,MAwBMS,EAAOC,IAEsC,IAFrC,YACnBL,GACmDK,EACnD,OAAOlB,EAAAA,cAACmB,EAAAA,EAAG,CAAC5B,MAAQ,GAAEsB,EAAYE,aAAe,C","sources":["webpack://barleytea.github.io/./src/components/card.tsx","webpack://barleytea.github.io/./src/components/card-list.tsx","webpack://barleytea.github.io/./src/templates/posts-by-tag.tsx"],"sourcesContent":["import { Link } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { ComponentType } from 'react'\nimport { TagList } from './tag-list'\n\nexport const Card: ComponentType<{\n  node: Queries.PaginationQuery['allMarkdownRemark']['nodes'][number]\n}> = ({ node }) => {\n  if (\n    !node.frontmatter ||\n    !node.frontmatter.title ||\n    !node.frontmatter.path ||\n    !node.frontmatter.created ||\n    !node.frontmatter.eyecatcher ||\n    !node.frontmatter.tags\n  ) {\n    throw new Error('Invalid node')\n  }\n\n  const image = getImage(node.frontmatter.eyecatcher.childImageSharp)\n  if (!image) {\n    throw new Error('No image')\n  }\n\n  return (\n    <Link\n      to={`${node.frontmatter.path}`}\n      className=\"text-[color:var(--text-color)]\"\n    >\n      <GatsbyImage image={image} alt=\"thumbnail\" />\n      <div className=\"flex flex-col justify-between\">\n        <div className=\"break-all p-2\">\n          <div className=\"font-semibold\">{node.frontmatter.title}</div>\n          <div className=\"text-sm font-light italic\">\n            {node.frontmatter.created}\n          </div>\n        </div>\n        <div className=\"mt-auto\">\n          <TagList tags={node.frontmatter.tags} />\n        </div>\n      </div>\n    </Link>\n  )\n}\n","import { ComponentType } from 'react'\nimport { Card } from './card'\n\nexport const CardList: ComponentType<{\n  nodes: Queries.PaginationQuery['allMarkdownRemark']['nodes']\n}> = ({ nodes }) => {\n  return (\n    <ul className=\"xs:grid-cols-2 grid list-none gap-1 pl-0 sm:grid-cols-2 md:grid-cols-3\">\n      {nodes.map((node) => (\n        <li key={node.id} className=\"rounded border border-gray-500\">\n          <Card node={node} />\n        </li>\n      ))}\n    </ul>\n  )\n}\n","import { HeadProps, PageProps, graphql } from 'gatsby'\nimport { TagListContext } from '../../gatsby-node'\nimport { Layout } from '../components/layout'\nimport { CardList } from '../components/card-list'\nimport SEO from '../components/seo'\n\nconst PostsByTag = ({\n  data,\n  pageContext,\n}: PageProps<Queries.PostsByTagQuery, TagListContext>) => {\n  return (\n    <Layout>\n      <h1 className=\"my-4 text-xl text-[color:var(--text-color)]\">\n        {pageContext.tag} の記事一覧\n      </h1>\n      <CardList nodes={data.allMarkdownRemark.nodes} />\n    </Layout>\n  )\n}\n\nexport default PostsByTag\n\nexport const postsPaginationQuery = graphql`\n  query PostsByTag($tag: String!) {\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n      sort: { frontmatter: { created: DESC } }\n    ) {\n      nodes {\n        frontmatter {\n          path\n          title\n          created\n          tags\n          eyecatcher {\n            childImageSharp {\n              gatsbyImageData(width: 300, height: 300)\n            }\n          }\n        }\n        id\n      }\n    }\n  }\n`\n\nexport const Head = ({\n  pageContext,\n}: HeadProps<Queries.PostsByTagQuery, TagListContext>) => {\n  return <SEO title={`${pageContext.tag} の記事一覧`} />\n}\n"],"names":["Card","_ref","node","frontmatter","title","path","created","eyecatcher","tags","Error","image","getImage","childImageSharp","React","Link","to","className","GatsbyImage","alt","TagList","CardList","nodes","map","key","id","data","pageContext","Layout","tag","allMarkdownRemark","Head","_ref2","SEO"],"sourceRoot":""}