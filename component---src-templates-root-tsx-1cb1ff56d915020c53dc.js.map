{"version":3,"file":"component---src-templates-root-tsx-1cb1ff56d915020c53dc.js","mappings":"yMAKO,MAAMA,EAERC,IAAe,IAAd,KAAEC,GAAMD,EACZ,KACGC,EAAKC,aACLD,EAAKC,YAAYC,OACjBF,EAAKC,YAAYE,MACjBH,EAAKC,YAAYG,SACjBJ,EAAKC,YAAYI,YACjBL,EAAKC,YAAYK,MAElB,MAAM,IAAIC,MAAM,gBAGlB,MAAMC,GAAQC,EAAAA,EAAAA,GAAST,EAAKC,YAAYI,WAAWK,iBACnD,IAAKF,EACH,MAAM,IAAID,MAAM,YAGlB,OACEI,EAAAA,cAACC,EAAAA,KAAI,CACHC,GAAI,GAAGb,EAAKC,YAAYE,OACxBW,UAAU,kCAEVH,EAAAA,cAACI,EAAAA,EAAW,CAACP,MAAOA,EAAOQ,IAAI,cAC/BL,EAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,cAAA,OAAKG,UAAU,iBAAiBd,EAAKC,YAAYC,OACjDS,EAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,cAACM,EAAAA,EAAO,CAACX,KAAMN,EAAKC,YAAYK,SAGpCK,EAAAA,cAAA,OAAKG,UAAU,6CACZd,EAAKC,YAAYG,YCdfc,EAERnB,IAAgB,IAAf,MAAEoB,GAAOpB,EACb,OACEY,EAAAA,cAAA,MAAIG,UAAU,0EACXK,EAAMC,IAAKpB,GACVW,EAAAA,cAAA,MAAIU,IAAKrB,EAAKsB,GAAIR,UAAU,kCAC1BH,EAAAA,cAACb,EAAI,CAACE,KAAMA,O,wICvBf,MAAMuB,EAAmCxB,IAGzC,IAH0C,YAC/CyB,EAAW,WACXC,GACD1B,EACC,OACEY,EAAAA,cAAA,MAAIG,UAAU,sDACX,IAAIY,MAAMD,GAAYE,KAAK,GAAGP,IAAI,CAACQ,EAAGC,IAEnClB,EAAAA,cAAA,MACEG,UACEe,EAAM,IAAML,EACR,mEACA,0EAGNb,EAAAA,cAACC,EAAAA,KAAI,CACHC,GAAY,IAARgB,EAAY,IAAM,UAAUA,EAAM,IACtCR,IAAKQ,EACLf,UAAU,+DAETe,EAAM,OCpBRC,EAA4C/B,IAAsC,IAArC,WAAEgC,EAAU,gBAAEC,GAAiBjC,EACvF,OACEY,EAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,cAAA,MAAIG,UAAU,6DACZH,EAAAA,cAAA,MAAIG,UAAU,kBACZH,EAAAA,cAACC,EAAAA,KAAI,CACHC,GAAG,IACHC,UAAW,wFACW,KAApBkB,EACI,2FACA,wJAEP,QAIFD,EAAWX,IAAKa,GACftB,EAAAA,cAAA,MAAIU,IAAKY,EAAUnB,UAAU,kBAC3BH,EAAAA,cAACC,EAAAA,KAAI,CACHC,GAAI,aAAaoB,EAASC,gBAC1BpB,UAAW,wFACTmB,IAAaD,EACT,2FACA,wJAGLC,Q,cCMf,MApBiElC,IAA2B,IAA1B,KAAEoC,EAAI,YAAEC,GAAarC,EACrF,MAAM,WAAEgC,EAAU,SAAEE,GAAaG,EAEjC,OACEzB,EAAAA,cAAC0B,EAAAA,EAAM,KACL1B,EAAAA,cAACmB,EAAY,CACXC,WAAYA,EACZC,gBAAiBC,GAAY,KAE/BtB,EAAAA,cAACO,EAAAA,EAAQ,CAACC,MAAOgB,EAAKG,kBAAkBnB,QACxCR,EAAAA,cAAA,OAAKG,UAAU,6BACbH,EAAAA,cAACY,EAAU,CACTE,WAAYW,EAAYX,WACxBD,YAAaY,EAAYZ,iBAS5B,MA6BMe,EAAOA,IACX5B,EAAAA,cAAC6B,EAAAA,EAAG,K","sources":["webpack://barleytea.github.io/./src/components/card.tsx","webpack://barleytea.github.io/./src/components/card-list.tsx","webpack://barleytea.github.io/./src/components/pagination.tsx","webpack://barleytea.github.io/./src/components/category-tabs.tsx","webpack://barleytea.github.io/./src/templates/root.tsx"],"sourcesContent":["import { Link } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { ComponentType } from 'react'\nimport { TagList } from './tag-list'\n\nexport const Card: ComponentType<{\n  node: Queries.PaginationQuery['allMarkdownRemark']['nodes'][number]\n}> = ({ node }) => {\n  if (\n    !node.frontmatter ||\n    !node.frontmatter.title ||\n    !node.frontmatter.path ||\n    !node.frontmatter.created ||\n    !node.frontmatter.eyecatcher ||\n    !node.frontmatter.tags\n  ) {\n    throw new Error('Invalid node')\n  }\n\n  const image = getImage(node.frontmatter.eyecatcher.childImageSharp)\n  if (!image) {\n    throw new Error('No image')\n  }\n\n  return (\n    <Link\n      to={`${node.frontmatter.path}`}\n      className=\"text-[color:var(--text-color)]\"\n    >\n      <GatsbyImage image={image} alt=\"thumbnail\" />\n      <div className=\"flex flex-col justify-between\">\n        <div className=\"break-all p-2\">\n          <div className=\"font-semibold\">{node.frontmatter.title}</div>\n          <div className=\"mt-auto\">\n            <TagList tags={node.frontmatter.tags} />\n          </div>\n        </div>\n        <div className=\"text-sm font-light italic text-right mr-2\">\n          {node.frontmatter.created}\n        </div>\n      </div>\n    </Link>\n  )\n}\n","import { ComponentType } from 'react'\nimport { Card } from './card'\nimport { graphql } from 'gatsby'\n\nexport const query = graphql`\n  fragment CardList on MarkdownRemark {\n    id\n    frontmatter {\n      title\n      created\n      path\n      tags\n      category\n      eyecatcher {\n        childImageSharp {\n          gatsbyImageData(width: 296, height: 296, placeholder: BLURRED)\n        }\n      }\n    }\n  }\n`\n\ntype CardNode = Queries.CardListFragment\n\nexport const CardList: ComponentType<{\n  nodes: ReadonlyArray<Queries.CardListFragment>\n}> = ({ nodes }) => {\n  return (\n    <ul className=\"xs:grid-cols-2 grid list-none gap-1 pl-0 sm:grid-cols-2 md:grid-cols-3\">\n      {nodes.map((node) => (\n        <li key={node.id} className=\"rounded border border-gray-500\">\n          <Card node={node} />\n        </li>\n      ))}\n    </ul>\n  )\n}\n","import { Link } from 'gatsby'\nimport { ComponentType } from 'react'\n\ninterface Props {\n  totalPages: number\n  currentPage: number\n}\n\nexport const Pagination: ComponentType<Props> = ({\n  currentPage,\n  totalPages,\n}) => {\n  return (\n    <ul className=\"flex list-none pl-0 text-[color:var(--text-color)]\">\n      {new Array(totalPages).fill(0).map((_, idx) => {\n        return (\n          <li\n            className={\n              idx + 1 === currentPage\n                ? `border-grey-500 h-12 w-12 border bg-[color:var(--primary-color)]`\n                : `border-grey-500 h-12 w-12 border hover:bg-[color:var(--primary-color)]`\n            }\n          >\n            <Link\n              to={idx === 0 ? `/` : `/posts/${idx + 1}`}\n              key={idx}\n              className=\"flex h-full w-full items-center justify-center align-middle\"\n            >\n              {idx + 1}\n            </Link>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\ninterface CategoryTabsProps {\n  categories: string[]\n  currentCategory: string\n}\n\nexport const CategoryTabs: React.FC<CategoryTabsProps> = ({ categories, currentCategory }) => {\n  return (\n    <div className=\"mb-6\">\n      <ul className=\"flex flex-nowrap overflow-x-auto scrollbar-hide py-2 px-2\">\n        <li className=\"mx-2 flex-none\">\n          <Link\n            to=\"/\"\n            className={`px-6 py-2 border rounded-full text-lg transition-all duration-300 whitespace-nowrap ${\n              currentCategory === ''\n                ? 'bg-[color:var(--primary-color)] border-[color:var(--primary-color)] text-white font-bold'\n                : 'border-gray-700 text-gray-400 bg-gray-800/30 hover:border-[color:var(--primary-color)] hover:text-[color:var(--primary-color)] hover:bg-gray-800/50'\n            }`}\n          >\n            All\n          </Link>\n        </li>\n        {categories.map((category) => (\n          <li key={category} className=\"mx-2 flex-none\">\n            <Link\n              to={`/category/${category.toLowerCase()}`}\n              className={`px-6 py-2 border rounded-full text-lg transition-all duration-300 whitespace-nowrap ${\n                category === currentCategory\n                  ? 'bg-[color:var(--primary-color)] border-[color:var(--primary-color)] text-white font-bold'\n                  : 'border-gray-700 text-gray-400 bg-gray-800/30 hover:border-[color:var(--primary-color)] hover:text-[color:var(--primary-color)] hover:bg-gray-800/50'\n              }`}\n            >\n              {category}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n} ","import React from 'react'\nimport { graphql, PageProps } from 'gatsby'\nimport { Layout } from '../components/layout'\nimport { CardList } from '../components/card-list'\nimport { Pagination } from '../components/pagination'\nimport { CategoryTabs } from '../components/category-tabs'\nimport SEO from '../components/seo'\nimport '../components/card-list'\n\ntype RootPageData = Queries.PaginationQuery\n\ninterface PageContext {\n  limit: number\n  skip: number\n  totalPages: number\n  currentPage: number\n  categories: string[]\n  category?: string\n}\n\nconst RootPage: React.FC<PageProps<RootPageData, PageContext>> = ({ data, pageContext }) => {\n  const { categories, category } = pageContext\n\n  return (\n    <Layout>\n      <CategoryTabs \n        categories={categories} \n        currentCategory={category || ''} \n      />\n      <CardList nodes={data.allMarkdownRemark.nodes} />\n      <div className=\"my-12 flex justify-center\">\n        <Pagination\n          totalPages={pageContext.totalPages}\n          currentPage={pageContext.currentPage}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport default RootPage\n\nexport const query = graphql`\n  query Pagination($skip: Int!, $limit: Int!, $category: String) {\n    allMarkdownRemark(\n      sort: { frontmatter: { created: DESC } }\n      limit: $limit\n      skip: $skip\n      filter: { \n        frontmatter: { \n          category: { eq: $category }\n          draft: { ne: true }\n        } \n      }\n    ) {\n      nodes {\n        ...CardList\n      }\n      pageInfo {\n        currentPage\n        hasNextPage\n        hasPreviousPage\n        itemCount\n        pageCount\n        perPage\n        totalCount\n      }\n    }\n  }\n`\n\nexport const Head = () => {\n  return <SEO />\n}\n"],"names":["Card","_ref","node","frontmatter","title","path","created","eyecatcher","tags","Error","image","getImage","childImageSharp","React","Link","to","className","GatsbyImage","alt","TagList","CardList","nodes","map","key","id","Pagination","currentPage","totalPages","Array","fill","_","idx","CategoryTabs","categories","currentCategory","category","toLowerCase","data","pageContext","Layout","allMarkdownRemark","Head","SEO"],"sourceRoot":""}